<<<<<<< HEAD
{{- $name := "Adel A." -}}
{{- $email := "adelarab.school@gmail.com" -}}
{{- $restricted := false -}}
{{- $work := false -}}
{{- $toolchains := list
  "cloud"
  "docker"
  "iac"
  "java"
  "kubernetes"
  "node"
  "python"
  "rust"
  "go"
  "php"
  "c"
  "ruby"
  "extra"
 }}

{{- $data := . }}
{{- $_ := set $data "host" (default (dict) (get $data "host")) -}}
{{- $_ := set $data "user" (default (dict) (get $data "user")) -}}
{{- $_ := set $data "toolchains" (default (dict) (get $data "toolchains")) -}}

{{- $headless := false -}}
{{- $ephemeral := false -}}
{{/* detect GitHub codespaces, VSCode remote containers, Docker containers, Multipass VMs, and Vagrant boxes */}}
{{- $ephemeralEnvOrUsername := or (env "CODESPACES") (env "REMOTE_CONTAINERS_IPC") (eq .chezmoi.username "root" "ubuntu" "vagrant" "vscode" "devcontainer") -}}
{{- $ephemeralCgroup := and (stat "/proc/1/cgroup") (output "cat" "/proc/1/cgroup" | regexMatch "(docker|lxc)") -}}
{{- if or $ephemeralEnvOrUsername $ephemeralCgroup -}}
{{-   $headless = true -}}
{{-   $ephemeral = true -}}
{{-   writeToStdout "Chezmoi is running in a container.\n" -}}
{{- end -}}

{{- $distro := dict "family" .chezmoi.os "id" (get .chezmoi.osRelease "id" | default .chezmoi.os) -}}
{{- if or (eq $distro.id "arch") (eq $distro.id "archarm") -}}
{{- $_ := set $distro "id" "archlinux" -}}
{{- end -}}

{{- $chassisType := "desktop" }}
{{- if $ephemeral -}}
{{-   $chassisType = "ephemeral" }}
{{- else if eq .chezmoi.os "linux" }}
{{-   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") -}}
{{-     $chassisType = "wsl" }}
{{-   else -}}
{{-     $chassisType = (output "hostnamectl" "--json=short" | mustFromJson).Chassis }}
{{-   end -}}
{{- else if eq .chezmoi.os "darwin" }}
{{-   if contains "MacBook" (output "sysctl" "-n" "hw.model") }}
{{-     $chassisType = "laptop" }}
{{-   else }}
{{-     $chassisType = "desktop" }}
{{-   end }}
{{- else if eq .chezmoi.os "windows" }}
{{-   $chassisType = (output "powershell.exe" "-noprofile" "-command" "if (Get-WmiObject -Class win32_battery -ComputerName localhost) { echo laptop } else { echo desktop }") }}
{{- end }}

{{- $toolchainsEnabled := dict }}
{{- range $toolchain := $toolchains }}
    {{- $withoutToolchains := env "WITHOUT_TOOLCHAINS" -}}
    {{- $withoutToolchain := env (list "WITHOUT" (upper $toolchain) | join "_") -}}
    {{- $withToolchain := env (list "WITH" (upper $toolchain) | join "_") -}}
    {{- if and (or $withoutToolchains $withoutToolchain) (not $withToolchain) -}}
      {{- writeToStdout (list "Disabled" $toolchain "toolchain.\n" | join " ")  -}}
      {{- $_ := set $toolchainsEnabled $toolchain false }}
    {{- else }}
      {{- $_ := set $toolchainsEnabled $toolchain true }}
    {{- end}}
{{- end }}
{{- if stdinIsATTY -}}

{{- $work = promptBoolOnce $data.host "work" "Work Environment" $work -}}
{{- $restricted = promptBoolOnce $data.host "restricted" "Restricted Environment (no sudo access)" $restricted -}}
{{- $name = promptStringOnce $data.user "name" "Your Name" $name -}}
{{- $email = promptStringOnce $data.user "email" "Your Email" $email -}}

{{- writeToStdout "ðŸ’¡ Tip: you can re-enter your name and email with `chezmoi init --data=false`.\n" -}}

{{- else -}}
{{-   $headless = true -}}
{{-   writeToStdout "Chezmoi is running in headless environment.\n" -}}
{{- end -}}

sourceDir: {{ .chezmoi.sourceDir | quote }}

{{ if not $headless -}}
age:
  identity: "{{ $.chezmoi.homeDir }}/.config/age/key.txt"
  recipient: "age1n9jltsf9cvcrmhm0elyvzky6tdq9jmvgluus9qt3mfsactg9g5fqxntykf" # pragma: allowlist secret
{{- end }}

diff:
  pager: "delta"
data:
    host:
      arch: {{ .chezmoi.arch | quote }}
      distro:
        family: {{ $distro.family | quote }}
        id: {{ $distro.id | quote }}
      home: {{ .chezmoi.homeDir | quote }}
      type: {{ $chassisType | quote }}
      work: {{ $work }}
      interactive: {{ stdinIsATTY }}
      restricted: {{ $restricted }}
      headless: {{ $headless }}
    toolchains:
    {{- range $toolchain, $enabled := $toolchainsEnabled }}
      {{ $toolchain}}: {{ $enabled }}
    {{- end }}
    user:
      email: {{ $email | quote }}
      name: {{ $name | quote }}
      login: {{ .chezmoi.username | quote }}

||||||| parent of b2e4b4f (Aqua Update)
=======
{{- $email := "adelarab.school@gmail.com" -}}
{{- $github_user := "sosumappu" -}}
{{- $computer_name := default "erdnase" (env "CM_computer_name") -}}
{{- $hostname := default "localhost" (env "CM_hostname") -}}
{{- $is_codespace := false -}}
{{- $passphrase := default "change me with 'SETPASS=1 chezmoi init'" (index . "passphrase") -}}

{{- $is_codespace:= env "CODESPACES" | not | not -}}

{{- if (env "ASK") }}
{{-   $computer_name = promptString "Computer Name" $computer_name -}}
{{-   $hostname = promptString "Hostname" $hostname -}}
{{-   $email = promptString "Email" $email -}}
{{-   $github_user = promptString "GitHub Username" $github_user -}}
{{-   $asdf_version = promptString "Asdf Version" $asdf_version -}}
{{- end }}

{{- if (env "SETPASS") }}
{{    $passphrase = promptString "Encryption Passphrase" $passphrase -}}
{{- end }}

{{- $delta_is_not_installed := true }}
{{- if (contains "delta" (output "bash" "-c" "command -v delta || true")) }}
{{-   $delta_is_not_installed = false }}
{{- end }}

data:
  email: {{ $email | quote }}
  github_user: {{ $github_user | quote }}
  computer_name: {{ $computer_name | quote }}
  hostname: {{ $hostname | quote }}
  passphrase: {{ $passphrase | quote }}

  flags:
    delta_is_not_installed: {{ $delta_is_not_installed }}
    is_codespace: {{ $is_codespace }}

encryption: gpg
gpg:
  symmetric: true
  args: ["--batch", "--passphrase", {{ $passphrase | quote }}, "--no-symkey-cache", "--quiet"]
>>>>>>> b2e4b4f (Aqua Update)
