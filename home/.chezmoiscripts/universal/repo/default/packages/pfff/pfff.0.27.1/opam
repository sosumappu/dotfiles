opam-version: "2.0"
maintainer: "pad@fb.com"
authors: [ "Yoann Padioleau <pad@fb.com>" ]
homepage: "https://github.com/facebook/pfff/wiki/Main"
build: [
  ["./configure" "--novisual" "--nocmt" "--nobytecode"]
  [make "depend"]
  [make]
  [make "opt"]
]
remove: [[make "uninstall-findlib"]]
depends: [
  "ocaml" {>= "3.12.1" & < "4.02.0"}
  "ocamlfind"
  "camlp4"
  "num"
]
bug-reports: "https://github.com/facebook/pfff/issues"
dev-repo: "git+https://github.com/facebook/pfff"
license: "LGPL-2.1-only WITH OCaml-LGPL-linking-exception"
install: [make "install-findlib"]
synopsis:
  "Tools and APIs for program analysis, code visualization, refactoring"
description: """
pfff is a set of tools and APIs to perform some static analysis,
dynamic analysis, code visualizations, code navigations, or
style-preserving source-to-source transformations such as refactorings
on source code. For now the effort is focused on PHP but there is also
good support for C, C++, Java, HTML, Javascript, Css, and preliminary
support for Erlang, Python, C#, Lisp, Scheme, Haskell, OPA, Sql, and
even TeX. There is also very good support for OCaml and noweb
(literate programming) so that pfff can be used on the code of pfff
itself.

For more information see https://github.com/facebook/pfff/wiki/Main"""
url {
  src: "https://github.com/facebook/pfff/archive/v0.27.2.tar.gz"
  checksum: [
    "sha256=883a8b95ded39c78f49cfa3b45d850cc2e50b4da1303a4e43305d18c76835405"
    "md5=de8b70fe8faa57dd6de20bc813b226d3"
  ]
}
